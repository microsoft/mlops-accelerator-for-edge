trigger: none

parameters:
  - name: exec_environment
    displayName: "Execution Environment"
    default: "dev"
  - name: use_case_type
    displayName: "type of use case to execute"
    default: "fridge_detection"

variables:
- group: mlops_platform_${{parameters.exec_environment}}_vg
- name: PIPELINE_TYPE
  value: ${{parameters.use_case_type}}


# variable_generation
stages:
  - template: ${{variables['System.DefaultWorkingDirectory']}}/use_case_builder/common/devops/templates/stage_variable_generation.yml
    parameters:
      exec_environment: ${{parameters.exec_environment}}
      use_case_type: ${{parameters.use_case_type}}

  - stage: build_rtsp_module
    displayName: Build RTSP edge module
    dependsOn:
      - variable_generation
    variables:
      - template: ${{variables['System.DefaultWorkingDirectory']}}/use_case_builder/common/devops/templates/variable_init_for_a_stage.yml
    jobs:
      - job: build_docker_image
        steps:
          - task: UsePythonVersion@0
            displayName: "install python 3.8"
            continueOnError: false
            inputs:
              versionSpec: "3.8"

          - task: AzureKeyVault@2
            continueOnError: false
            inputs:
              azureSubscription: $(AZURE_RM_SVC_CONNECTION)
              KeyVaultName: $(KEYVAULT_NAME)
              SecretsFilter: "*"
              RunAsPreJob: false

          - task: Bash@3
            displayName: Add Azure IoT Extensions
            inputs:
              targetType: "inline"
              script: "pip install -U pyOpenSSL==22.0.0"

          - task: AzureCLI@2
            continueOnError: false
            inputs:
              azureSubscription: $(AZURE_RM_SVC_CONNECTION)
              scriptType: bash
              workingDirectory: $(system.DefaultWorkingDirectory)/use_case_builder/${{parameters.use_case_type}}/modules/$(RTSP_MODULE_NAME)
              scriptLocation: inlineScript
              inlineScript: |
                set -e # fail on error
                az storage blob download-batch -d "videos" --pattern $(RTSP_VIDEO_FILE_PATTERN) --account-name $(RTSP_VIDEO_STORAGE_ACCOUNT_NAME) --source $(RTSP_VIDEO_CONTAINER_NAME)
                docker login "$(registry-uri)" -u "$(registry-username)" -p "$(registry-password)"
                docker buildx build -f Dockerfile.amd64 --platform linux/amd64 -t $(RTSP_DOCKER_IMAGE_NAME) . --output type=docker
                docker tag $(RTSP_DOCKER_IMAGE_NAME) "$(registry-uri)"/$(RTSP_DOCKER_IMAGE_NAME):latest
                docker tag $(RTSP_DOCKER_IMAGE_NAME) "$(registry-uri)"/$(RTSP_DOCKER_IMAGE_NAME):$(Build.BuildNumber)
                docker push "$(registry-uri)"/$(RTSP_DOCKER_IMAGE_NAME):latest
                docker push "$(registry-uri)"/$(RTSP_DOCKER_IMAGE_NAME):$(Build.BuildNumber)
                docker images
            name: rtsp_image
            displayName: Build and push rtsp image