parameters:
  - name: exec_environment
    displayName: "Execution Environment"
  - name: use_case_type
    displayName: "type of use case to execute"

stages:
  - stage: variable_generation
    displayName: "Setup variables"
    jobs:
      - job: load_config_variables
        steps:
          - powershell: |
              $config_json = Get-Content -Raw -Path '$(System.DefaultWorkingDirectory)/use_case_builder/${{parameters.use_case_type}}/use_case_config.json' | ConvertFrom-Json
              $config_val = $config_json.psobject.properties.Where({$_.name -eq "${{parameters.exec_environment}}"}).value
              Write-Output $config_val.KEYVAULT_NAME
              foreach ($property in $config_val.PSObject.Properties) {
                $pname = $property.Name
                $pvalue = $property.Value
                Write-Output "##vso[task.setvariable variable=$pname;isoutput=true]$pvalue"
                }
            name: loading_use_case_config
            
      - job: validate_assign_variables
        dependsOn: load_config_variables
        variables:
          - name: USE_CASE_CONFIG_NAME
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.USE_CASE_CONFIG_NAME'] ]
          - name: ENV_NAME  
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.ENV_NAME'] ]
          - name: ORCHESTRATOR_MODULE_NAME
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.ORCHESTRATOR_MODULE_NAME'] ]
          - name: RTSP_MODULE_NAME
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.RTSP_MODULE_NAME'] ]
          - name: E2E_TEST_MODULE_NAME
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.E2E_TEST_MODULE_NAME'] ]
          - name: CAMERA_PATH
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.CAMERA_PATH'] ]
          - name: FRAME_RATE
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.FRAME_RATE'] ]      
          - name: FRAME_CAPTURE_INTERVAL
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.FRAME_CAPTURE_INTERVAL'] ]    
          - name: MODEL_ENDPOINT
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.MODEL_ENDPOINT'] ]
          - name: SCORE_THRESHOLD
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.SCORE_THRESHOLD'] ]
          - name: IOTHUB_NAME
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.IOTHUB_NAME'] ]
          - name: IOT_HUB_RESOURCE_GROUP
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.IOT_HUB_RESOURCE_GROUP'] ]
          - name: KEYVAULT_NAME
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.KEYVAULT_NAME'] ]
          - name: AZURE_RM_SVC_CONNECTION
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.AZURE_RM_SVC_CONNECTION'] ]
          - name: REGISTRY_NAME
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.REGISTRY_NAME'] ]
          - name: RESOURCE_GROUP_NAME
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.RESOURCE_GROUP_NAME'] ]
          - name: LOG_LEVEL
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.LOG_LEVEL'] ]
          - name: RTSP_VIDEO_CONTAINER_NAME
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.RTSP_VIDEO_CONTAINER_NAME'] ]
          - name: RTSP_VIDEO_FILE_PATTERN
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.RTSP_VIDEO_FILE_PATTERN'] ]
          - name: RTSP_VIDEO_STORAGE_ACCOUNT_NAME
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.RTSP_VIDEO_STORAGE_ACCOUNT_NAME'] ]
          - name: RTSP_DOCKER_IMAGE_NAME
            value: $[ dependencies.load_config_variables.outputs['loading_use_case_config.RTSP_DOCKER_IMAGE_NAME'] ]          
        steps:
          - script: |
              if [ -z "$(USE_CASE_CONFIG_NAME)" ]
              then
                echo "variables are not available. Check parameter values or config json file for valid values.."
                exit 1
              else
                echo "variables were loaded from config file.."
                printenv
              fi
            name: validate_variable_load
          - task: AzureKeyVault@2
            continueOnError: false
            inputs:
              azureSubscription: $(AZURE_RM_SVC_CONNECTION)
              KeyVaultName: $(KEYVAULT_NAME)
              SecretsFilter: "*"
              RunAsPreJob: false
            name: load_keyvault_secrets
