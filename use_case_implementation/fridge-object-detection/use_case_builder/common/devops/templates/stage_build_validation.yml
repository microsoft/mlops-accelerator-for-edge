parameters:
  - name: exec_environment
    displayName: "Execution Environment"
  - name: use_case_type
    displayName: "type of use case to execute"

stages:
  - stage: build_validation
    displayName: Build Validation
    dependsOn:
      - variable_generation
    variables:
      - template: ${{variables['System.DefaultWorkingDirectory']}}/use_case_builder/common/devops/templates/variable_init_for_a_stage.yml
    jobs:
      - job: build_validation
        workspace:
          clean: outputs | resources | all 
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.8'
              addToPath: true

          - script: |
              python --version
              python -m venv env
              source env/bin/activate
              python -m pip install --upgrade pip
              pip install flake8 pytest pytest-cov bandit poetry
              poetry config installer.max-workers 10 
            displayName: 'Install Python dependencies'

          - script: |
              source env/bin/activate
              cd use_case_builder/${{parameters.use_case_type}}/modules/$(ORCHESTRATOR_MODULE_NAME)
              flake8 --exclude=tests --statistics
            displayName: 'Linting Orchestrator'
          
          - script: |
              source env/bin/activate
              cd use_case_builder/${{parameters.use_case_type}}/modules/$(E2E_TEST_MODULE_NAME)
              flake8 --exclude=tests --statistics
            displayName: 'Linting E2E module'

          - script: |
              source env/bin/activate
              cd use_case_builder/${{parameters.use_case_type}}/modules/$(ORCHESTRATOR_MODULE_NAME)
              export PYTHONPATH=$(Build.SourcesDirectory)/use_case_builder/${{parameters.use_case_type}}/modules/$(ORCHESTRATOR_MODULE_NAME)
              poetry install --no-interaction --no-ansi -vvv
              poetry run pytest --junitxml=junit/test-results.xml --cov=./ --cov-report xml
            displayName: 'Unit Testing'

          - script: |
              source env/bin/activate
              cd use_case_builder/${{parameters.use_case_type}}/modules/$(ORCHESTRATOR_MODULE_NAME)
              bandit -r ./ -x tests -ll -ii -f json -o report.json
            displayName: 'Security Testing Orchestrator'

          - script: |
              source env/bin/activate
              cd use_case_builder/${{parameters.use_case_type}}/modules/$(E2E_TEST_MODULE_NAME)
              bandit -r ./ -x tests -ll -ii -f json -o report.json
            displayName: 'Security Testing E2E module'

          - task: PublishTestResults@2
            displayName: 'Publish Unit Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/test-*.xml'
              testRunTitle: 'Publish test results for Python $(python.version)'

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/use_case_builder/${{parameters.use_case_type}}/modules/$(ORCHESTRATOR_MODULE_NAME)/coverage.xml'
              pathToSources: '$(System.DefaultWorkingDirectory)'
              reportDirectory: 'use_case_builder/${{parameters.use_case_type}}/modules/$(ORCHESTRATOR_MODULE_NAME)'
              failIfCoverageEmpty: false

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: use_case_builder/${{parameters.use_case_type}}/modules/$(ORCHESTRATOR_MODULE_NAME)/report.json
              artifactName: 'Bandit Report'
