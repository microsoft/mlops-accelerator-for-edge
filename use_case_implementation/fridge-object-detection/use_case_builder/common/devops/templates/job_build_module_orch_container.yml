parameters:
  - name: exec_environment
    displayName: "Execution Environment"
  - name: use_case_type
    displayName: "type of use case to execute"

jobs:
  - job: build_orch_docker_image
    steps:
      - task: UsePythonVersion@0
        displayName: "install python 3.8"
        continueOnError: false
        inputs:
          versionSpec: "3.8"

      - task: AzureKeyVault@2
        continueOnError: false
        inputs:
          azureSubscription: $(AZURE_RM_SVC_CONNECTION)
          KeyVaultName: $(KEYVAULT_NAME)
          SecretsFilter: "*"
          RunAsPreJob: false

      - task: Bash@3
        displayName: Add Azure IoT Extensions
        inputs:
          targetType: "inline"
          script: "pip install -U pyOpenSSL==22.0.0"

      - task: AzureCLI@2
        displayName: Build and Push Orchestrator Docker Image
        continueOnError: false
        name: orch_image
        inputs:
          azureSubscription: $(AZURE_RM_SVC_CONNECTION)
          scriptType: bash
          workingDirectory: $(system.DefaultWorkingDirectory)/use_case_builder/${{parameters.use_case_type}}/modules/$(ORCHESTRATOR_MODULE_NAME)
          scriptLocation: inlineScript
          inlineScript: |
            set -e # fail on error
            docker login "$(ACR_URL)" -u "$(ACR_USERNAME)" -p "$(ACR_PASSWORD)"  
            docker buildx build -f Dockerfile.amd64 --platform linux/amd64 -t $(ACR_URL)/$(ORCHESTRATOR_MODULE_NAME):$(Build.BuildNumber) . --push
            echo "##vso[task.setvariable variable=ORCHESTRATOR_DOCKER_IMAGE_NAME;isOutput=true;]$(ORCHESTRATOR_MODULE_NAME)"
            echo "##vso[task.setvariable variable=ORCHESTRATOR_DOCKER_IMAGE_VERSION;isOutput=true;]$(Build.BuildNumber)"
