parameters:
  - name: exec_environment
    displayName: "Execution Environment"
    default: "dev"
  - name: model_type
    displayName: "type of model to execute"
  - name: deployment_id
    displayName: "Version of the deployment"
  - name: TARGET_CONDITION
    displayName: "Target Condition for the deployment"

jobs:
  - job: "Deploy_IoT_Edge"
    displayName: "Deploy Images To Edge Device"
    steps:
      - task: UsePythonVersion@0
        displayName: "install python 3.8"
        continueOnError: false
        inputs:
          versionSpec: "3.8"
      - task: Bash@3
        displayName: Add Azure IoT Extensions
        inputs:
          targetType: "inline"
          script: "pip install -U pyOpenSSL==22.0.0"
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: "current"
          specificBuildWithTriggering: false
          buildVersionToDownload: "latest"
          artifactName: DeploymentManifest
          downloadPath: "$(System.ArtifactsDirectory)"
          cleanDestinationFolder: true # Optional

      - task: AzureCLI@2
        displayName: "Deploy and Test ML Models"
        inputs:
          azureSubscription: $(AZURE_RM_SVC_CONNECTION)
          scriptType: "bash"
          scriptLocation: "inlineScript"
          failOnStandardError: false
          inlineScript: |
            az extension add --name azure-iot;
            # apt install jq
            az config set extension.use_dynamic_install=yes_without_prompt
            temp_dep_id=$(az iot edge deployment create --hub-name $(IOTHUB_NAME) -g $(IOT_HUB_RESOURCE_GROUP)  \
                --deployment-id '${{ parameters.deployment_id }}' \
                --content $(System.ArtifactsDirectory)/DeploymentManifest/edgeconfig/deployment.template.json --priority 1  \
                --target-condition "${{ parameters.TARGET_CONDITION}}" --layered)

            # Loop until deployment, modules, and Docker containers are successful on all edge devices
            sleep 60
            while true; do
                # Get the deployment status for all edge devices
                dep_id=$(az iot edge deployment show \
                    --hub-name $(IOTHUB_NAME) \
                    --deployment-id '${{ parameters.deployment_id }}' -g $(IOT_HUB_RESOURCE_GROUP) \
                    --query '{success:systemMetrics.results.reportedSuccessfulCount,total:systemMetrics.results.targetedCount}')
                success=$(echo $dep_id | jq -r '.success')
                total=$(echo $dep_id | jq -r '.total') 
                sleep 60
                echo "Total devices: $total"
                echo "Successful deployments: $success"
                DEPLOYMENT_STATUS=$(($total - $success))
                echo "Deployment pending on devices $DEPLOYMENT_STATUS"
                # Check if deployment is successful on all edge devices
                if [ "$DEPLOYMENT_STATUS" -ne 0 ]; then
                    sleep 20
                    echo "Deployment successful on all edge devices"
                    
                    # Check the module and container status for each device
                    DEVICE_LIST=$(az iot hub query --hub-name $(IOTHUB_NAME) -g $(IOT_HUB_RESOURCE_GROUP) -q "SELECT deviceId FROM devices WHERE ${{ parameters.TARGET_CONDITION}}" -o tsv)
                    ALL_MODULES_RUNNING=true

                    for DEVICE in $DEVICE_LIST; do
                        MODULE_STATUS=$(az iot hub module-twin show --hub-name $(IOTHUB_NAME) -g $(IOT_HUB_RESOURCE_GROUP) --device-id $DEVICE --module-id '$edgeAgent' --query 'properties.reported.modules.'"$MODEL_NAME"'.status' -o tsv)
                        if [[ "$MODULE_STATUS" != "running" ]]; then
                            ALL_MODULES_RUNNING=false
                            break
                        fi
                    done

                    for DEVICE in $DEVICE_LIST; do
                        MODULE_STATUS=$(az iot hub module-twin show --hub-name $(IOTHUB_NAME) -g $(IOT_HUB_RESOURCE_GROUP) --device-id $DEVICE --module-id '$edgeAgent' --query 'properties.reported.modules.'"$SMOKE_TEST_DOCKER_NAME"'.status' -o tsv)
                        if [[ "$MODULE_STATUS" != "running" ]]; then
                            ALL_MODULES_RUNNING=false
                            break
                        fi
                    done

                    # Check if all modules and containers are up and running
                    if [[ $ALL_MODULES_RUNNING == true ]]; then
                        echo "All modules and containers are up and running"
                        break
                    else
                        echo "Some modules or containers are not up and running yet"
                        sleep 10
                    fi
                else
                    echo "All modules and containers are up and running"
                    break
                fi
            done

      - task: AzureCLI@2
        displayName: "Smoke test ML Model"
        inputs:
          azureSubscription: $(AZURE_RM_SVC_CONNECTION)
          scriptType: "bash"
          scriptLocation: "inlineScript"
          failOnStandardError: false
          inlineScript: |
            cd $(system.DefaultWorkingDirectory)/scripts
            ls
            DEVICE_LIST=$(az iot hub query --hub-name $(IOTHUB_NAME) -g $(IOT_HUB_RESOURCE_GROUP) -q "SELECT deviceId FROM devices WHERE ${{ parameters.TARGET_CONDITION}}" -o tsv)
            echo $DEVICE_LIST
            readarray -t devices <<< "$DEVICE_LIST"
            smoke_test=$(python3 test_executer.py "${devices[*]}" "SMOKE_TEST" $(IOTHUB_NAME) $(SMOKE_TEST_DOCKER_NAME) "$(host_port_number)" "$(PIPELINE_TYPE)" $(TEST_DURATION_MINUTES) $(TEST_INTERVAL_MINUTES))
            echo $smoke_test
            if echo "$smoke_test" | grep -q "pipeline_run_status=False"; then   
              echo "Smoke test failed"
              exit 1
            else   
              echo "Smoke test passed"
            fi
