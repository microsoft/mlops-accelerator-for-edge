pr: none
trigger:
  branches:
   include:
     - development
  paths:
    include:
      - devops/*
      - mlops/common/*
      - src/nyc_src/*
      - mlops/nyc_taxi/*
      - src/shared/*

pool:
  vmImage: ubuntu-latest

parameters:
 - name: exec_environment
   displayName: "Execution Environment"
   default: "dev"
 - name: model_type
   displayName: "type of model to execute"



variables:
- group: MLOps-${{parameters.model_type}}-${{parameters.exec_environment}}-VG
- name: PIPELINE_TYPE
  value: ${{parameters.model_type}}

stages:
    - stage: execute_training_job
      displayName: execute_training_job
      variables:
      - template: templates/experiment_variables.yml
        parameters:
          exec_environment: ${{parameters.exec_environment}}
      jobs:
      - job: Execute_ml_Job_Pipeline
        steps:
        - template: templates/get_connection_details.yml
        - template: templates/configure_azureml_agent.yml
        - template: templates/execute_mlops_pipeline.yml
          parameters:
            script_parameter: |
              python -m mlops.${{ parameters.model_type }}.src.mlops_pipeline \
                --subscription_id $(SUBSCRIPTION_ID) \
                --resource_group_name $(RESOURCE_GROUP_NAME) \
                --workspace_name $(WORKSPACE_NAME) \
                --cluster_name $(CLUSTER_NAME) \
                --cluster_size $(CLUSTER_SIZE) \
                --cluster_region $(CLUSTER_REGION) \
                --build_reference $(BUILD.BUILDID) \
                --deploy_environment ${{parameters.exec_environment}} \
                --experiment_name $(EXPERIMENT_NAME) \
                --display_name $(DISPLAY_NAME) \
                --wait_for_completion True \
                --environment_name $(ENVIRONMENT_NAME) \
                --env_base_image_name $(ENV_BASE_IMAGE_NAME) \
                --model_name $(MODEL_NAME) \
                --conda_path $(CONDA_PATH) \
                --output_file run_id.txt

      - template: templates/image-generation-template.yaml
        parameters:
          exec_environment: ${{parameters.exec_environment}}
          model_type: ${{parameters.model_type}}

    - stage: Generate_Edge_Deployment_Manifest
      displayName: Generate_Edge_Deployment_Manifest
      variables:
      - template: templates/experiment_variables.yml
        parameters:
          exec_environment: ${{parameters.exec_environment}}
      jobs:
      - deployment: ApproveDeployment
        environment: approve_deployment
        strategy:
          runOnce:
            deploy:
              steps:
                - script: echo "Approving will deploy the model to the edge"
      - job: 'Generate_Edge_Deployment_Manifest'
        displayName: 'Generate Layered Edge Deployment Manifest'
        steps:
        - task: AzureKeyVault@2
          continueOnError: false
          inputs:
            azureSubscription: $(AZURE_RM_SVC_CONNECTION)
            KeyVaultName: $(KEYVAULT_NAME)
            SecretsFilter: '*'
            RunAsPreJob: false
        - task: UsePythonVersion@0
          displayName: "install python 3.9"
          continueOnError: false
          inputs: 
            versionSpec: '3.9'
        - task: Bash@3
          displayName: Add Azure IoT Extensions
          inputs:
            targetType: 'inline'
            script: 'pip install -U iotedgedev==3.3.7 pyOpenSSL==22.0.0'

        - script: |
            echo "##vso[task.setvariable variable=CONTAINER_REGISTRY_NAME]$(REGISTRY_NAME)"
            echo "##vso[task.setvariable variable=CONTAINER_REGISTRY_USERNAME]$(registry-username)"
            echo "##vso[task.setvariable variable=CONTAINER_REGISTRY_PASSWORD]$(registry-password)"
            echo "##vso[task.setvariable variable=CONTAINER_REGISTRY_ADDRESS]$(registry-uri)"
            echo "##vso[task.setvariable variable=ML_MODEL_DOCKER_IMAGE_NAME]$(MODEL_NAME)"
            echo "##vso[task.setvariable variable=ML_MODEL_DOCKER_VERSION]$(Build.BuildNumber)"
            echo "##vso[task.setvariable variable=SMOKE_TEST_DOCKER_NAME]$(SMOKE_TEST_DOCKER_NAME)"
            echo "##vso[task.setvariable variable=SMOKE_TEST_DOCKER_VERSION]$(Build.BuildNumber)"
            echo "##vso[task.setvariable variable=HOST_PORT_NUMBER]$(host_port_number)"
          displayName: Get image information from module.json
        - task: CopyFiles@2
          displayName: Copy Edge Deployment Manifest
          inputs:
            contents: 'deployment.template.json'
            targetFolder: $(Build.ArtifactStagingDirectory)/edgeconfig
            cleanTargetFolder: true
            sourceFolder: $(System.DefaultWorkingDirectory)/edge
        - task: replacetokens@3
          displayName: 'Replace tokens in *.config *.json'
          inputs:
            targetFiles: '$(Build.ArtifactStagingDirectory)/edgeconfig/deployment.template.json'
            verbosity: detailed
            tokenPrefix: '${'
            tokenSuffix: '}'
            keepToken: true

        - task: PublishBuildArtifacts@1
          displayName: Publish Manifest To Artifacts
          inputs:
            pathToPublish: $(Build.ArtifactStagingDirectory)
            artifactName: DeploymentManifest

    - stage: 'Build_Test_Edge_Module'
      displayName: 'Build Test Module For ML Model'
      variables:
      - template: templates/experiment_variables.yml
        parameters:
          exec_environment: ${{parameters.exec_environment}}
      dependsOn: Generate_Edge_Deployment_Manifest
      condition: succeeded('Generate_Edge_Deployment_Manifest')
      jobs:
      - job: 'build_smoke_test_module'
        displayName: 'Deploy Images To Edge Device'
        steps:
        - task: UsePythonVersion@0
          displayName: "install python 3.9"
          continueOnError: false
          inputs: 
            versionSpec: '3.9'
        - task: Bash@3
          displayName: Add Azure IoT Extensions
          inputs:
            targetType: 'inline'
            script: 'pip install -U iotedgedev==3.3.7 pyOpenSSL==22.0.0'

        - task: AzureKeyVault@2
          continueOnError: false
          inputs:
            azureSubscription: $(AZURE_RM_SVC_CONNECTION)
            KeyVaultName: $(KEYVAULT_NAME)
            SecretsFilter: '*'
            RunAsPreJob: false

        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            specificBuildWithTriggering: false 
            buildVersionToDownload: 'latest'
            artifactName: DeploymentManifest
            downloadPath: '$(System.ArtifactsDirectory)' 
            cleanDestinationFolder: true # Optional

        - task: AzureCLI@2
          displayName: "Build and push smoke test Docker image"
          inputs:
            azureSubscription: $(AZURE_RM_SVC_CONNECTION)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              docker login "$(registry-uri)" -u "$(registry-username)" -p "$(registry-password)" 
              docker image build -t "$(registry-uri)"/$(SMOKE_TEST_DOCKER_NAME):$(Build.BuildNumber) ./edge-smoke-test/modules/TestModule
              docker push $(registry-uri)/$(SMOKE_TEST_DOCKER_NAME):$(Build.BuildNumber)

    - stage: 'Deploy_IoT_Edge'
      displayName: 'Deploy_IoT_Edge'
      variables:
      - template: templates/experiment_variables.yml
        parameters:
          exec_environment: ${{parameters.exec_environment}}
      dependsOn: Build_Test_Edge_Module
      condition: succeeded('Build_Test_Edge_Module')
      jobs:
      - job: 'Deploy_IoT_Edge'
        displayName: 'Deploy Images To Edge Device'
        steps:
        - task: UsePythonVersion@0
          displayName: "install python 3.9"
          continueOnError: false
          inputs: 
            versionSpec: '3.9'
        - task: Bash@3
          displayName: Add Azure IoT Extensions
          inputs:
            targetType: 'inline'
            script: 'pip install -U iotedgedev==3.3.7 pyOpenSSL==22.0.0'

        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            specificBuildWithTriggering: false 
            buildVersionToDownload: 'latest'
            artifactName: DeploymentManifest
            downloadPath: '$(System.ArtifactsDirectory)' 
            cleanDestinationFolder: true # Optional

        - task: AzureCLI@2
          displayName: "Deploy and Test ML Models"
          inputs:
            azureSubscription: $(AZURE_RM_SVC_CONNECTION)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            failOnStandardError: false
            inlineScript: |
              az extension add --name azure-iot;
              apt install jq
              az config set extension.use_dynamic_install=yes_without_prompt
              temp_dep_id=$(az iot edge deployment create --hub-name $(IOTHUB_NAME) -g $(IOT_HUB_RESOURCE_GROUP)  \
                  --deployment-id '$(Build.Buildid)' \
                  --content $(System.ArtifactsDirectory)/DeploymentManifest/edgeconfig/deployment.template.json --priority 1  \
                  --target-condition "$(TARGET_CONDITION)" --layered)

              # Loop until deployment, modules, and Docker containers are successful on all edge devices
              sleep 60
              while true; do
                # Get the deployment status for all edge devices
                dep_id=$(az iot edge deployment show \
                    --hub-name $(IOTHUB_NAME) \
                    --deployment-id '$(Build.Buildid)' -g $(IOT_HUB_RESOURCE_GROUP) \
                    --query '{success:systemMetrics.results.reportedSuccessfulCount,total:systemMetrics.results.targetedCount}')
                success=$(echo $dep_id | jq -r '.success')
                total=$(echo $dep_id | jq -r '.total') 
                sleep 60
                echo "$total"
                echo "$success"
                DEPLOYMENT_STATUS=$(($total - $success))
                echo "$DEPLOYMENT_STATUS"
                # Check if deployment is successful on all edge devices
                if [ "$DEPLOYMENT_STATUS" -ne 0 ]; then
                    sleep 20
                    echo "Deployment successful on all edge devices"
                      
                    # Check the module and container status for each device
                    DEVICE_LIST=$(az iot hub query --hub-name $(IOTHUB_NAME) -g $(IOT_HUB_RESOURCE_GROUP) -q "SELECT deviceId FROM devices WHERE $TARGET_CONDITION" -o tsv)
                    ALL_MODULES_RUNNING=true

                    for DEVICE in $DEVICE_LIST; do
                        MODULE_STATUS=$(az iot hub module-twin show --hub-name $(IOTHUB_NAME) -g $(IOT_HUB_RESOURCE_GROUP) --device-id $DEVICE --module-id '$edgeAgent' --query 'properties.reported.modules.'"$(MODEL_NAME)"'.status' -o tsv)
                        if [[ "$MODULE_STATUS" != "running" ]]; then
                            ALL_MODULES_RUNNING=false
                            break
                        fi
                    done

                    for DEVICE in $DEVICE_LIST; do
                        MODULE_STATUS=$(az iot hub module-twin show --hub-name $(IOTHUB_NAME) -g $(IOT_HUB_RESOURCE_GROUP) --device-id $DEVICE --module-id '$edgeAgent' --query 'properties.reported.modules.'"$(SMOKE_TEST_DOCKER_NAME)"'.status' -o tsv)
                        if [[ "$MODULE_STATUS" != "running" ]]; then
                            ALL_MODULES_RUNNING=false
                            break
                        fi
                    done

                    # Check if all modules and containers are up and running
                    if [[ $ALL_MODULES_RUNNING == true ]]; then
                        echo "All modules and containers are up and running"
                        break
                    else
                        echo "Some modules or containers are not up and running yet"
                        sleep 10
                    fi
                else
                    echo "All modules and containers are up and running"
                    break
                fi
              done


        - task: AzureCLI@2
          displayName: "Smoke test ML Model"
          inputs:
            azureSubscription: $(AZURE_RM_SVC_CONNECTION)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            failOnStandardError: false
            inlineScript: |
              sleep 20;
              DEVICE_LIST=$(az iot hub query --hub-name $(IOTHUB_NAME) -g $(IOT_HUB_RESOURCE_GROUP) -q "SELECT deviceId FROM devices WHERE $(TARGET_CONDITION)" -o tsv)
              JSON_FMT='{"port" : "%s","model_type" : "%s" }\n'
              module_payload=$(printf "$JSON_FMT" "$(host_port_number)" "$(PIPELINE_TYPE)")
              for DEVICE in $DEVICE_LIST; do
                return_code_det=$(az iot hub invoke-module-method -n '$(IOTHUB_NAME)' -d $DEVICE -m $(SMOKE_TEST_DOCKER_NAME) --method-name 'smokeTest' --method-payload "$module_payload" | jq .status);
                echo "test result of ML Model Module:";
                echo $(az iot hub invoke-module-method -n '$(IOTHUB_NAME)' -d $DEVICE -m $(SMOKE_TEST_DOCKER_NAME) --method-name 'smokeTest' --method-payload "$module_payload");
                if [[ "$return_code_det" != 200 ]]; then
                    echo "$DEVICE failed smoke test"
                else
                    echo "$DEVICE passed smoke test"
                fi
              done
