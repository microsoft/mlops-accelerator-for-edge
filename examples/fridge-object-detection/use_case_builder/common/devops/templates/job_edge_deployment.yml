parameters:
- name: target_condition
- name: deployment_file_name
  displayName: "Type of deployment manifest to generate"
  default: "deployment.template.json"

jobs:
  - job: "deploy_iot_edge"
    displayName: "Deploy Images To Edge Device"
    steps:
      - task: UsePythonVersion@0
        displayName: "install python 3.8"
        continueOnError: false
        inputs:
          versionSpec: "3.8"
      - task: Bash@3
        displayName: Add Azure IoT Extensions
        inputs:
          targetType: "inline"
          script: "pip install -U pyOpenSSL==22.0.0"

      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: "current"
          specificBuildWithTriggering: false
          buildVersionToDownload: "latest"
          artifactName: DeploymentManifest
          downloadPath: "$(System.ArtifactsDirectory)"
          cleanDestinationFolder: true # Optional

      - task: AzureCLI@2
        displayName: "Deploy and Test Edge Modules"
        inputs:
          azureSubscription: $(AZURE_RM_SVC_CONNECTION)
          scriptType: "bash"
          scriptLocation: "inlineScript"
          failOnStandardError: false
          inlineScript: |
            az extension add --name azure-iot;
            # apt install jq
            az config set extension.use_dynamic_install=yes_without_prompt
            temp_dep_id=$(az iot edge deployment create --hub-name $(IOTHUB_NAME) -g $(IOT_HUB_RESOURCE_GROUP)  \
                --deployment-id '$(Build.Buildid)' \
                --content $(System.ArtifactsDirectory)/DeploymentManifest/edgeconfig/${{parameters.deployment_file_name}} --priority 1  \
                --target-condition "${{parameters.target_condition}}" --layered)

            # Loop until deployment, modules, and Docker containers are successful on all edge devices
            sleep 60
            while true; do
              # Get the deployment status for all edge devices
              dep_id=$(az iot edge deployment show \
                  --hub-name $(IOTHUB_NAME) \
                  --deployment-id '$(Build.Buildid)' -g $(IOT_HUB_RESOURCE_GROUP) \
                  --query '{success:systemMetrics.results.reportedSuccessfulCount,total:systemMetrics.results.targetedCount}')
              success=$(echo $dep_id | jq -r '.success')
              total=$(echo $dep_id | jq -r '.total') 
              sleep 60
              echo "Total targetted devices $total"
              echo "Number of devices reporting succesful deployment $success"
              DEPLOYMENT_STATUS=$(($total - $success))
              echo "Deployment pemdimg devices $DEPLOYMENT_STATUS"
              # Check if deployment is successful on all edge devices
              if [ "$DEPLOYMENT_STATUS" -ne 0 ]; then
                  sleep 20
                  echo "Deployment successful on all edge devices"
                    
                  # Check the module and container status for each device
                  DEVICE_LIST=$(az iot hub query --hub-name $(IOTHUB_NAME) -g $(IOT_HUB_RESOURCE_GROUP) -q "SELECT deviceId FROM devices WHERE ${{parameters.target_condition}}" -o tsv)
                  echo $DEVICE_LIST
                  ALL_MODULES_RUNNING=true

                  for DEVICE in $DEVICE_LIST; do
                      MODULE_STATUS=$(az iot hub module-twin show --hub-name $(IOTHUB_NAME) -g $(IOT_HUB_RESOURCE_GROUP) --device-id $DEVICE --module-id '$edgeAgent' --query 'properties.reported.modules.'"$ORCHESTRATOR_MODULE_NAME"'.status' -o tsv)
                      if [[ "$MODULE_STATUS" != "running" ]]; then
                          ALL_MODULES_RUNNING=false
                          break
                      fi
                  done

                  for DEVICE in $DEVICE_LIST; do
                      MODULE_STATUS=$(az iot hub module-twin show --hub-name $(IOTHUB_NAME) -g $(IOT_HUB_RESOURCE_GROUP) --device-id $DEVICE --module-id '$edgeAgent' --query 'properties.reported.modules.'"$RTSP_MODULE_NAME"'.status' -o tsv)
                      if [[ "$MODULE_STATUS" != "running" ]]; then
                          ALL_MODULES_RUNNING=false
                          break
                      fi
                  done

                  # Check if all modules and containers are up and running
                  if [[ $ALL_MODULES_RUNNING == true ]]; then
                      echo "All modules and containers are up and running"
                      break
                  else
                      echo "Some modules or containers are not up and running yet"
                      sleep 10
                  fi
              else
                  echo "All modules and containers are up and running"
                  break
              fi
            done